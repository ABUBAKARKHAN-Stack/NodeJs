<!DOCTYPE html>
<html lang="en">

<head>
    <!-- üåç Meta Information -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- üè∑Ô∏è Page Title -->
    <title>üîó URL Shortener</title>

    <!-- üé® Stylesheet -->
    <link rel="stylesheet" href="/style.css">
</head>

<body>
    <!-- üì¶ Main Container -->
    <div class="container">
        <h1>üîó URL Shortener</h1>

        <!-- üìù URL Shortening Form -->
        <form id="shortenForm" class="form-container">
            <!-- üåê URL Input -->
            <input type="url" name="url" id="url" placeholder="Paste URL..." required>

            <!-- ‚úèÔ∏è Custom Shortcode Input (Optional) -->
            <input type="text" name="shortendCode" id="shortendCode" placeholder="Custom Code (Optional)">

            <!-- üöÄ Submit Button -->
            <button type="submit">Shorten</button>
        </form>

        <!-- üîó Shortened URLs Section -->
        <div class="shortened-urls">
            <h3>Shortened URLs</h3>
            <ul id="urlList">
                <% if (links && Object.keys(links).length> 0) { %>
                    <% Object.entries(links).forEach(([key, value])=> { %>
                        <li>
                            <div class="shortened-url-card">
                                <!-- üåç Original URL -->
                                <div>
                                    <strong>Original Link:</strong>
                                    <a href="<%= value %>" target="_blank">
                                        <%= value %>
                                    </a>
                                </div>

                                <!-- üîó Shortened URL -->
                                <div>
                                    <strong>Shortened Link:</strong>
                                    <a href="<%= key %>" target="_blank">
                                        <%= `http://localhost:3000/${key}` %>
                                    </a>
                                </div>

                                <!-- üéõÔ∏è Action Buttons -->
                                <div class="button-group">
                                    <!-- üìã Copy Button -->
                                    <button class="copy-btn" onclick="onCopyUrl(`${window.location.host}/<%= key %>`)">
                                        üìã Copy
                                    </button>

                                    <!-- ‚ùå Delete Button -->
                                    <button class="delete-btn" onclick="onDeleteLink('<%= key %>')">
                                        ‚ùå Delete
                                    </button>
                                </div>
                            </div>
                        </li>
                        <% }) %>
                            <% } else { %>
                                <!-- ‚ÑπÔ∏è Message When No URLs Exist -->
                                <p>No shortened URLs available.</p>
                                <% } %>
            </ul>
        </div>
    </div>

    <script>
        // üìå DOM Elements
        const urlList = document.getElementById("urlList");

        /*
         * üìù FORM HANDLING: Submitting URL Shortener Form
         * - Prevents default page reload.
         * - Collects form data (URL & custom shortcode).
         * - Sends data to the backend for shortening.
         * - Refreshes the page upon successful request.
         */
        document.getElementById("shortenForm").addEventListener("submit", async (event) => {
            event.preventDefault(); // ? Prevent page reload on form submission

            // üì• Get form values
            const formData = new FormData(event.target);
            const url = formData.get("url");
            const shortendCode = formData.get("shortendCode");

            try {
                // üöÄ Send URL data to backend for shortening
                const res = await fetch("/url", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ url, shortendCode }),
                });

                if (res.ok) {
                    event.target.reset(); // ‚úÖ Clear form after submission
                    location.reload(); // üîÑ Refresh the page to display new link
                }
            } catch (error) {
                console.error("‚ùå Error:", error);
            }
        });

        /*
         * üìã COPY SHORTENED URL
         * - Uses `navigator.clipboard.writeText()` to copy the URL.
         * - Displays an alert on success or logs an error on failure.
         */
        function onCopyUrl(url) {
            if (!navigator.clipboard) {
                alert("üìã Your browser does not support clipboard access.");
                return;
            }
            navigator.clipboard.writeText(url)
                .then(() => alert(`‚úÖ Copied: ${url}`))
                .catch((err) => console.error("‚ùå Copy failed:", err));
        }

        /*
         * ‚ùå DELETE SHORTENED LINK
         * - Sends a DELETE request to remove the URL from storage.
         * - Refreshes the page to update the UI.
         */
        async function onDeleteLink(short) {
            try {
                const res = await fetch(`/delete/${short}`, { method: "DELETE" });

                if (res.ok) location.reload(); // üîÑ Refresh page after deletion
            } catch (error) {
                console.error("‚ùå Error deleting link:", error);
            }
        }

        /*
         * üü° (OLD) FETCH & DISPLAY SHORTENED LINKS - NOW REPLACED BY SERVER-SIDE RENDERING (SSR)
         * - Previously used to fetch all links via API call.
         * - Now, we are using **EJS for SSR**, so this is no longer needed.
         * - Keeping it here for reference.
         */
        /*
        async function getAllLinks() {
            try {
                const res = await fetch("/shortend/get-links");
                const data = await res.json();
    
                urlList.innerHTML = ""; // Clear old list
    
                Object.entries(data).forEach(([key, value]) => {
                    const li = document.createElement("li");
                    li.innerHTML = `
                <div class="shortened-url-card">
                    <div>
                        <strong>Original Link:</strong> 
                        <a href="${value}" target="_blank">${value}</a>
                    </div>
                    <div>
                        <strong>Shortened Link:</strong> 
                        <a href="/shortend/${key}" target="_blank">
                            ${window.location.origin}/shortend/${key}
                        </a>
                    </div>
                    <div class="button-group">
                        <button class="copy-btn" onclick="onCopyUrl('${window.location.origin}/shortend/${key}')">üìã Copy</button>
                        <button class="delete-btn" onclick="onDeleteLink('${key}')">‚ùå Delete</button>
                    </div>
                </div>`;
                    urlList.appendChild(li);
                });
            } catch (error) {
                console.error("‚ùå Error fetching links:", error);
            }
        }
        */
    </script>

</body>

</html>